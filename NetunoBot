package occult.safejar;

import com.jcraft.jsch.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import javax.swing.border.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class SafeJar extends JFrame implements ActionListener {

    private JPanel mainPanel;
    private JTextArea dialog;
    private JTextArea input;
    private JScrollPane scroll;
    private JButton executeButton;
    private JButton clearButton;
    private JButton menuButton;
    private JButton aboutButton;
    private JButton speedTestButton;
    private JButton configButton;
    private JButton scanButton;
    private Session session;

    private Timer animationTimer;
    private int dialogX = -600;

    public SafeJar() {
        initializeUI();
        displayWelcomeMessage(); // Display welcome message
    }

    private void initializeUI() {
        mainPanel = new JPanel(new BorderLayout());
        dialog = new JTextArea(20, 50);
        input = new JTextArea(4, 40);
        scroll = new JScrollPane(dialog, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        executeButton = new JButton("Execute");
        clearButton = new JButton("Clear");
        menuButton = new JButton("Chat");
        aboutButton = new JButton("About Me");
        speedTestButton = new JButton("SpeedTest");
        configButton = new JButton("Config");
        scanButton = new JButton("Scan");

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 400);
        setTitle("SafeJar Application");

        mainPanel.setBackground(Color.decode("#1A1A1A")); // Dark Gray
        dialog.setBackground(new Color(5, 7, 8));
        dialog.setForeground(Color.GREEN);
        dialog.setFont(new Font("Helvetica", Font.BOLD, 12));
        input.setBackground(Color.decode("#F5F2F1"));
        input.setForeground(Color.BLACK);
        input.setFont(new Font("Helvetica", Font.PLAIN, 12));

        JPanel inputPanel = new JPanel(new BorderLayout());
        inputPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        inputPanel.setBackground(Color.decode("#1A1A1A")); // Dark Gray
        inputPanel.add(input, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.decode("#1A1A1A")); // Dark Gray
        buttonPanel.add(executeButton);
        buttonPanel.add(clearButton);
        buttonPanel.add(menuButton);
        buttonPanel.add(aboutButton);
        buttonPanel.add(speedTestButton);
        buttonPanel.add(configButton);
        buttonPanel.add(scanButton);

        mainPanel.add(scroll, BorderLayout.CENTER);
        mainPanel.add(inputPanel, BorderLayout.SOUTH);
        mainPanel.add(buttonPanel, BorderLayout.NORTH);

        add(mainPanel);

        executeButton.addActionListener(this);
        clearButton.addActionListener(this);
        menuButton.addActionListener(this);
        aboutButton.addActionListener(this);
        speedTestButton.addActionListener(this);
        configButton.addActionListener(this);
        scanButton.addActionListener(this);

        animationTimer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (dialogX < 0) {
                    dialogX += 5;
                    dialog.setLocation(dialogX, 0);
                    repaint();
                } else {
                    ((Timer) e.getSource()).stop();
                }
            }
        });
        animationTimer.start();
    }


    private void displayWelcomeMessage() {
String welcomeMessage =
    "Siga o coelho branco \n" +
    " __  __          __                              \n" +
    "/\\ \\/\\ \\        /\\ \\__                           \n" +
    "\\ \\ `\\\\ \\     __\\ \\ ,_\\  __  __    ___     ___   \n" +
    " \\ \\ , ` \\  /'__`\\ \\ \\/ /\\ \\/\\ \\ /' _ `\\  / __`\\ \n" +
    "  \\ \\ \\\\`\\ \\/\\  __/\\ \\ \\_\\ \\ \\_\\ \\/\\ \\/\\ \\/\\ \\L\\ \\\n" +
    "   \\ \\_\\ \\_\\ \\____\\ \\__\\\\ \\____/\\ \\_\\ \\_\\ \\____/\n" +
    "    \\/_/\\/_/\\/____/ \\/__/ \\/___/  \\/_/\\/_/\\/___/ \n";

        
        
        JOptionPane.showMessageDialog(this, welcomeMessage, "Welcome", JOptionPane.INFORMATION_MESSAGE);
    }



    private String formatTemplate(String template) {
        String innerScreenColor = "#F5F2F1";
        String textColor = "#000000";

        String formattedTemplate = template.replace("{{INNER_SCREEN_COLOR}}", innerScreenColor)
                .replace("{{TEXT_COLOR}}", textColor);

        return formattedTemplate;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == executeButton) {
            String command = input.getText();
            try {
                executeCommand(command);
            } catch (JSchException | IOException ex) {
                ex.printStackTrace();
            }
        } else if (e.getSource() == clearButton) {
            clearScreen();
        } else if (e.getSource() == menuButton) {
            openMenu();
        } else if (e.getSource() == aboutButton) {
            showAboutMe();
        } else if (e.getSource() == speedTestButton) {
            try {
                executePythonCode();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else if (e.getSource() == configButton) {
            openConfig();
        } else if (e.getSource() == scanButton) {
            // Handle scan button action
        }
    }

 private void openConfig() {
    String configMessage =
            "Configuration Settings\n" +
            "-----------------------------\n" +
            "Inner Screen Color: {{INNER_SCREEN_COLOR}}\n" +
            "Text Color: {{TEXT_COLOR}}\n";

    String[] innerScreenColors = {"#E84A5F", "#355C7D", "#0000FF"}; // Example inner screen colors
    String[] textColors = {"#FFFF00", "#FF00FF", "#00FFFF"}; // Example text colors

    // Create a color chooser dialog
    JColorChooser colorChooser = new JColorChooser();
    colorChooser.setPreviewPanel(new JPanel()); // Hide the preview panel

    // Display color chooser dialog
    int result = JOptionPane.showConfirmDialog(this, colorChooser, "Choose Colors",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (result == JOptionPane.OK_OPTION) {
        // Get selected colors
        Color innerScreenColor = colorChooser.getColor();
        Color textColor = JColorChooser.showDialog(this, "Choose Text Color", Color.BLACK);

        // Update UI colors
        mainPanel.setBackground(innerScreenColor);
        dialog.setBackground(innerScreenColor);
        dialog.setForeground(textColor);
        input.setBackground(innerScreenColor);
        input.setForeground(textColor);

        // Replace placeholders with selected colors
        String formattedConfigMessage = configMessage.replace("{{INNER_SCREEN_COLOR}}", toHexString(innerScreenColor))
                .replace("{{TEXT_COLOR}}", toHexString(textColor));

        JOptionPane.showMessageDialog(this, formattedConfigMessage, "Configuration",
                JOptionPane.INFORMATION_MESSAGE);
    }
}


private String toHexString(Color color) {
    return String.format("#%02X%02X%02X", color.getRed(), color.getGreen(), color.getBlue());
}


    private void executeCommand(String command) throws JSchException, IOException {
        if (session != null && session.isConnected()) {
            ChannelExec channel = (ChannelExec) session.openChannel("exec");
            channel.setCommand(command);
            channel.connect();

            BufferedReader in = new BufferedReader(new InputStreamReader(channel.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                dialog.append(line + "\n");
            }

            in.close();
            channel.disconnect();
        } else {
            JOptionPane.showMessageDialog(this, "Not connected to a server", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void connect(String user, String password, String host, int port) throws JSchException {
        JSch jsch = new JSch();
        session = jsch.getSession(user, host, port);
        session.setPassword(password);
        session.setConfig("StrictHostKeyChecking", "no");
        session.connect();
        dialog.append("Connected to " + host + "\n");
    }

    public void disconnect() {
        if (session != null && session.isConnected()) {
            session.disconnect();
            dialog.append("Disconnected from the server\n");
        }
    }

    private void clearScreen() {
        dialog.setText("");
    }

    private void openMenu() {
        String userInput = JOptionPane.showInputDialog(this, "Enter a message:");
        if (userInput != null && !userInput.isEmpty()) {
            String response = generateChatBotResponse(userInput);
            dialog.append("User: " + userInput + "\n");
            dialog.append("Chat Bot: " + response + "\n");
        }
    }

    private String generateChatBotResponse(String userInput) {
        return userInput; // Echo the user's input
    }

    private void showAboutMe() {
        String aboutMessage = "Netuno Bot\n"
                + "Version: 1.0\n"
                + "Occult Group\n"
                + "Descrição: Esse é um aplicativo experimental, use sob sua própria conta e risco, não oferecemos garantias de nenhum tipo.\n"
                + "Para mais informações, entre na toca do coelho";

        JOptionPane.showMessageDialog(this, aboutMessage, "About Me", JOptionPane.INFORMATION_MESSAGE);
    }
    
   private void executePythonCode() throws IOException {
    String pythonScript = "import speedtest\n\n"
            + "# Create a Speedtest object\n"
            + "st = speedtest.Speedtest()\n\n"
            + "# Run the download speed test and print the results\n"
            + "download_speed = st.download() / 1000000  # Convert bytes to megabits\n"
            + "print(f\"Download speed: {download_speed:.2f} Mbps\")\n\n"
            + "# Run the upload speed test and print the results\n"
            + "upload_speed = st.upload() / 1000000  # Convert bytes to megabits\n"
            + "print(f\"Upload speed: {upload_speed:.2f} Mbps\")\n\n"
            + "# Get the ping time and print the results\n"
            + "ping_time = st.results.ping\n"
            + "print(f\"Ping time: {ping_time:.2f} ms\")";

    // Create the Python script file
        File scriptFile = File.createTempFile("speedtest", ".py");
        FileWriter writer = new FileWriter(scriptFile);
        writer.write(pythonScript);
        writer.close();

        // Execute the Python script
        ProcessBuilder processBuilder = new ProcessBuilder("python", scriptFile.getAbsolutePath());
        Process process = processBuilder.start();

        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            dialog.append(line + "\n");
        }

        reader.close();

        try {
            int exitCode = process.waitFor();
            System.out.println("Python process exited with code: " + exitCode);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }

        // Delete the temporary script file
        scriptFile.delete();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            SafeJar safeJar = new SafeJar();
            safeJar.setVisible(true);

            String user = JOptionPane.showInputDialog(safeJar, "Enter the username:");
            String password = JOptionPane.showInputDialog(safeJar, "Enter the password:");
            String host = JOptionPane.showInputDialog(safeJar, "Enter the host IP address:");
            int port = 22;

            try {
                safeJar.connect(user, password, host, port);
            } catch (JSchException e) {
                e.printStackTrace();
            }
        });
    }
}
