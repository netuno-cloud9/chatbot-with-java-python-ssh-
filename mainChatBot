package occult.safejar;

import com.jcraft.jsch.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import javax.swing.border.*;

public class SafeJar extends JFrame implements ActionListener {

    private JPanel mainPanel;
    private JTextArea dialog;
    private JTextArea input;
    private JScrollPane scroll;
    private JButton executeButton;
    private Session session;

    public SafeJar() {
        mainPanel = new JPanel(new BorderLayout());
        dialog = new JTextArea(20, 50);
        input = new JTextArea(4, 40);
        scroll = new JScrollPane(dialog, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        executeButton = new JButton("Execute");

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 400);
        setTitle("SafeJar Application");
        
        mainPanel.setBackground(Color.WHITE);
        dialog.setBackground(Color.BLACK);
        dialog.setForeground(Color.GREEN);
        input.setBackground(Color.WHITE);
        input.setForeground(Color.BLACK);
        
        JPanel inputPanel = new JPanel(new BorderLayout());
        inputPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        inputPanel.setBackground(Color.WHITE);
        inputPanel.add(input, BorderLayout.CENTER);
        inputPanel.add(executeButton, BorderLayout.EAST);
        
        // Redesigned executeButton
        executeButton.setPreferredSize(new Dimension(80, 30));
        executeButton.setFont(new Font("Monospaced", Font.BOLD, 12));
        executeButton.setBackground(new Color(255, 204, 0));
        executeButton.setBorder(new LineBorder(new Color(0, 0, 0), 2, false));
        executeButton.setFocusPainted(false);

        mainPanel.add(scroll, BorderLayout.CENTER);
        mainPanel.add(inputPanel, BorderLayout.SOUTH);
        add(mainPanel);

        executeButton.addActionListener(this);
    displayWelcomeMessage(); // Display welcome message
    }

    private void displayWelcomeMessage() {
        String welcomeMessage = "Welcome to SafeJar Application!\n"
                + "Please enter your command and click the Execute button to execute it.\n"
                + "You can view the command output in the dialog area below.";

        JOptionPane.showMessageDialog(this, welcomeMessage, "Welcome", JOptionPane.INFORMATION_MESSAGE);
    }


    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == executeButton) {
            String command = input.getText();
            try {
                executeCommand(command);
            } catch (JSchException | IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void executeCommand(String command) throws JSchException, IOException {
        if (session != null && session.isConnected()) {
            ChannelExec channel = (ChannelExec) session.openChannel("exec");
            channel.setCommand(command);
            channel.connect();

            BufferedReader in = new BufferedReader(new InputStreamReader(channel.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                dialog.append(line + "\n");
            }

            in.close();
            channel.disconnect();
        } else {
            JOptionPane.showMessageDialog(this, "Not connected to a server", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void connect(String user, String password, String host, int port) throws JSchException {
        JSch jsch = new JSch();
        session = jsch.getSession(user, host, port);
        session.setPassword(password);
        session.setConfig("StrictHostKeyChecking", "no");
        session.connect();
        dialog.append("Connected to " + host + "\n");
    }

    public void disconnect() {
        if (session != null && session.isConnected()) {
            session.disconnect();
            dialog.append("Disconnected from the server\n");
        }
    }

    public static void main(String[] args) {
        SafeJar safeJar = new SafeJar();
        safeJar.setVisible(true);

        String user = JOptionPane.showInputDialog(safeJar, "Enter the username:");
        String password = JOptionPane.showInputDialog(safeJar, "Enter the password:");
        String host = JOptionPane.showInputDialog(safeJar, "Enter the host IP address:");
        int port = 22;

        try {
            safeJar.connect(user, password, host, port);
        } catch (JSchException e) {
            e.printStackTrace();
        }
    }
}
