package occult.safejar;

import com.jcraft.jsch.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class SafeJar {

    public static void main(String[] args) {
        
        System.out.println("Bem vindo ao SafeJar ChatBot");
        System.out.println("antes de realizar a conexão verifique se o servidor está ativo");
        
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the username: ");
        String user = scanner.nextLine();
        System.out.print("Enter the password: ");
        String password = scanner.nextLine();
        System.out.print("Enter the host IP address: ");
        String host = scanner.nextLine();
        int port = 22;

        try {

            JSch jsch = new JSch();
            Session session = jsch.getSession(user, host, port);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();
            System.out.println("Connected to " + host);

            OUTER:
            while (true) {
                System.out.println("Bem vindo ao SafeJar ChatBot");
                System.out.println("1. sudo me faça um sanduiche");
                System.out.println("2. Dicionário de Comandos");
                System.out.println("3. Execute um Comando no terminal Linux");
                System.out.println("4. Exit chatbot");
                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
                System.out.print("Enter the command number: ");
                String choice = reader.readLine();
                String command = "";
                // Executes the chosen command
                switch (choice) {
                    case "1":
                        System.out.println("O instalador de pacotes irá atualizar o sistema e instalar o fail2ban, ufw, rkhunter e aide.");
                        System.out.println("Deseja continuar? y/N");
                        String choice2 = reader.readLine();
                        if (choice2.equalsIgnoreCase("y")) {
                            
                          command = "sudo apt-get update && sudo apt-get install -y fail2ban ufw rkhunter aide";
                          ChannelExec channel = (ChannelExec) session.openChannel("exec");
                          channel.setCommand(command);
                          channel.connect();
                            
                            //prints the output
                            BufferedReader in = new BufferedReader(new InputStreamReader(channel.getInputStream()));
                            String line;
                            while ((line = in.readLine()) != null) {
                                System.out.println(line);
                            }                                                                              
                                                                                 
                            System.out.println("Instalação e configuração concluídas com sucesso!");
                        } else if (choice2.equalsIgnoreCase("n")) {
                            System.out.println("Desculpe, não foi possível concluir a instalação.");
                        } else {
                            System.out.println("Escolha inválida!");
                        }
                        break;
                    case "2":
                        // Lists the files in the current directory on the remote server
                        
                        
                        System.out.println("pwd\t\tExibe o diretório atual");
                        System.out.println("ls\t\tLista os arquivos e diretórios no diretório atual");
                        System.out.println("cd\t\tMuda o diretório atual");
                        System.out.println("mkdir\t\tCria um diretório");
                        System.out.println("rmdir\t\tRemove um diretório");
                        System.out.println("cp\t\tCopia um arquivo ou diretório");
                        System.out.println("mv\t\tMove ou renomeia um arquivo ou diretório");
                        System.out.println("rm\t\tRemove um arquivo ou diretório");
                        System.out.println("grep\t\tPesquisa um padrão em um arquivo ou saída de comando");
                        System.out.println("sed\t\tEdita um arquivo ou saída de comando usando expressões regulares");
                        System.out.println("awk\t\tProcessa e filtra dados em um arquivo ou saída de comando");
                        System.out.println("sort\t\tClassifica as linhas de um arquivo ou saída de comando");
                        System.out.println("uniq\t\tRemove linhas duplicadas em um arquivo ou saída de comando");
                        System.out.println("tar\t\tCompacta ou extrai arquivos em um arquivo tar");
                        System.out.println("zip\t\tCompacta ou extrai arquivos em um arquivo zip");
                        System.out.println("ssh\t\tConecta-se a outro servidor usando o protocolo SSH (Secure Shell)");
                        System.out.println("ping\t\tVerifica a conexão de rede com outro host");
                        System.out.println("traceroute\tRastreia a rota de pacotes através da rede");
                        System.out.println("ps\t\tExibe informações sobre os processos em execução no sistema.");
                        System.out.println("top\t\tExibe informações sobre o uso de CPU e memória do sistema em tempo real.");
                        System.out.println("netstat\t\tExibe informações sobre as conexões de rede ativas no sistema.");
                        System.out.println("ssh\t\tConecta-se a outro servidor usando o protocolo SSH (Secure Shell).");
                        System.out.println("scp\t\tCopia arquivos entre servidores usando o protocolo SSH (Secure Copy).");
                        System.out.println("df\t\tExibe informações sobre o espaço em disco usado e livre em todas as partições do sistema.");
                        System.out.println("du\t\tExibe informações sobre o uso de espaço em disco de arquivos e diretórios especificados.");
                        System.out.println("iostat\t\tExibe informações sobre a utilização de recursos de E/S.");
                        System.out.println("vmstat\t\tExibe informações sobre o uso de memória virtual.");
                        System.out.println("mpstat\t\tMonitora o uso da CPU em tempo real.");
                        System.out.println("free\t\tExibe informações sobre a utilização da memória.");
                        System.out.println("chmod\t\tAltera as permissões de um arquivo ou diretório.");
                        System.out.println("systemctl status\tVerifica o status de um serviço.");
                        System.out.println("uname\t\tExibe informações detalhadas sobre o sistema.");
                        System.out.println("swapon\t\tExibe informações sobre o uso de swap.");
                        break;
                    case "3":
                        // Gets a custom command from the user and executes it
                        System.out.print("Enter the command: ");
                        command = reader.readLine();
                        break;
                    case "4":
                        System.out.println("Exiting chatbot. Goodbye!");
                        break OUTER;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                        continue;
                }
                ChannelExec channel = (ChannelExec) session.openChannel("exec");
                channel.setCommand(command);
                channel.connect();
                //prints the output of the command
                BufferedReader in = new BufferedReader(new InputStreamReader(channel.getInputStream()));
                String line;
                while ((line = in.readLine()) != null) {
                    System.out.println(line);
                }
                in.close();
                channel.disconnect();
            }

            session.disconnect();
            System.out.println("Disconnected from " + host);

        } catch (JSchException | IOException e) {
            e.printStackTrace();
        }
    }
}
